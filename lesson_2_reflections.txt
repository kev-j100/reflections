What happens when you initialiaze a repository? Why do you need to do it?

When you initialize a repository, it is set up for get but none of the files are commited. You need to do it so you can start your Git respository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different from the working directory in that the files that are in the staging area are in the stage before being commited. It is valuable so you can have different files able to be committed. 

How can you use the stagin area to make sure you have one commit per logical change?

When you move files into the saging area without commiting. So if you make a change move your file to the staging area, you can have more in the working directory file that you haven't commited when you commit what is in the staging area.

What are some situations when brances would be helpful in keeping your history organized? How would branches help?

Branches can be used for creating different versions of your project. You can use them so you don't get your different experiments or versions of the project mixed up and keep them separate.

How do the diagrams help you visualize the branch structure?

Diagrams help by showing you where different things are in the sequence. It's not easy to picture in your mind where the branches come off.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together results in new files with the new things from both branches in the new master. It is diagrammed that way because it is now the parent of two branches. 

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Manually takes more time and effort to do if you only added or took away from files in different branches. If there are major changes though, merging automatically may not be possible or will have major conficts with the merged files.
